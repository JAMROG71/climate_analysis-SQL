%matplotlib inline
from matplotlib import style
style.use('fivethirtyeight')
import matplotlib.pyplot as plt

import numpy as np
import pandas as pd

import datetime as dt

# # Reflect Tables into SQLAlchemy ORM
# Python SQL toolkit and Object Relational Mapper
import sqlalchemy
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func

engine = create_engine('postgresql://postgres:Postgres1971@localhost:5678/Hawaii_db')    

# reflect an existing database into a new model
Base = automap_base()
# reflect the tables
Base.prepare(engine, reflect=True)

# We can view all of the classes that automap found
Base.classes.keys()

# Save references to each table
Measurement = Base.classes.measurement
Station = Base.classes.station

# Create our session (link) from Python to the DB
session = Session(engine)

# # Exploratory Climate Analysis
# Design a query to retrieve the last 12 months of precipitation data and plot the results
# Calculate the date 1 year ago from the last data point in the database
#prev_year
prev_year = dt.date(2017, 8, 23) - dt.timedelta(days = 365)

#time delta allows an option to subtract from 365 days using dt.date
# Perform a query to retrieve the data and precipitation scores
results = session.query(Measurement.date, Measurement.prcp).all()
df = pd.DataFrame(results, columns=['date', 'precipitation'])

# Save the query results as a Pandas DataFrame and set the index to the date column
df.set_index(df['date'], inplace=True)

# Sort the dataframe by date
df = df.sort_index()

# Use Pandas Plotting with Matplotlib to plot the data
df.drop(columns=['date'], inplace=True)

#df.plot(rot=90)
df

# ![precipitation](Images/precipitation.png)

# Use Pandas to calcualte the summary statistics for the precipitation data
df.describe()

# ![describe](Images/describe.png)
# Design a query to show how many stations are available in this dataset?
session.query(func.count(Station.station)).all()

# What are the most active stations? (i.e. what stations have the most rows)?
# List the stations and the counts in descending order.
session.query(Measurement.station, func.count(Measurement.station)).group_by(Measurement.station).order_by(func.count(Measurement.station).                                      desc()).all()

# Using the station id from the previous query, calculate the lowest temperature recorded, 
# highest temperature recorded, and average temperature most active station?
lowest = func.min(Measurement.tobs)
highest = func.max(Measurement.tobs)
average = func.avg(Measurement.tobs)
session.query(lowest, highest).all()

results = session.query(Measurement.tobs).filter(Measurement.station == 'USC00519281').all()
df = pd.DataFrame(results, columns=['tobs'])
df
